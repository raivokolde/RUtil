	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		a = i - kmin#
		b = kmin + kmax + 1#
		c = n - (i + kmax)#
		if(a < 0) a = 0#
		if(b < 0) b = 0#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		print(length(p))#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(p)
n = 10
kmin = 2
kmax = 2
i = 5
a = i - kmin#
		b = kmin + kmax + 1#
		c = n - (i + kmax)
a;b;c
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		a = i - kmin - 1#
		b = kmin + kmax + 1#
		c = n - (i + kmax)#
		if(a < 0) a = 0#
		if(b < 0) b = 0#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		print(length(p))#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(p)
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		a = i - kmin - 1#
		b = kmin + kmax + 1#
		c = n - a - b#
		if(a < 0) a = 0#
		if(b < 0) b = 0#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		print(length(p))#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(p)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		a = i - kmin - 1#
		b = kmin + kmax + 1#
		c = n - a - b#
		if(a < 0) a = 0#
		if(b < 0) b = 0#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		print(n)#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(p)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		a = i - kmin - 1#
		b = kmin + kmax + 1#
		c = n - a - b#
		if(a < 0) a = 0#
		if(b < 0) b = 0#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		print(n)#
		print(a)#
		print(b)#
		print(c)#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(p)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		if (i <= kmin) kmin = kmin - i#
		if (n - i < kmax) kmax = kmax - (n - i)#
		a = i - kmin - 1#
		b = kmin + kmax + 1#
		c = n - a - b#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		print(n)#
		print(a)#
		print(b)#
		print(c)#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(p)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		if (i <= kmin) kmin = kmin - i#
		if (n - i <=  kmax) kmax = kmax - (n - i)#
		a = i - kmin - 1#
		b = kmin + kmax + 1#
		c = n - a - b#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		print(n)#
		print(a)#
		print(b)#
		print(c)#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(p)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		if (i <= kmin) kmin = kmin - i#
		if (n - i <=  kmax) kmax = kmax - (n - i)#
		a = i - kmin - 1#
		b = kmin + kmax + 1#
		c = n - a - b#
		#
		print(n)#
		print(a)#
		print(b)#
		print(c)#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(p)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		if (i <= kmin) kmin = kmin - i#
		if (n - i <=  kmax) kmax = kmax - (n - i)#
		a = i - kmin#
		b = kmin + kmax + 1#
		c = n - a - b#
		#
		print(n)#
		print(a)#
		print(b)#
		print(c)#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(p)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		if (i <= kmin) kmin = kmin - i#
		if (n - i <=  kmax) kmax = kmax - (n - i)#
		a = i - kmin#
		b = kmin + kmax + 1#
		c = n - a - b#
		#
		print(n)#
		print(kmin)#
		print(kmax)#
		print(c)#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(p)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:10){#
		if (i <= kmin) kmin = kmin - i#
		if (n - i <=  kmax) kmax = kmax - (n - i)#
		a = i - kmin#
		b = kmin + kmax + 1#
		c = n - a - b#
		#
		print(n)#
		print(kmin)#
		print(kmax)#
		print(c)#
		#
		#
	} #
}#
#
running_mean(p)
running_mean(1:10)
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		if (i <= kmin) kkmin = kmin - i#
		if (n - i <=  kmax) kkmax = kmax - (n - i)#
		a = i - kkmin#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		#
		print(n)#
		print(kkmin)#
		print(kkmax)#
		print(c)#
		#
		#
	} #
}#
#
running_mean(1:10)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		kkmin = kmin#
		kkmax = kmax#
		if (i <= kmin) kkmin = kmin - i#
		if (n - i <=  kmax) kkmax = kmax - (n - i)#
		a = i - kkmin#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		#
		print(n)#
		print(kkmin)#
		print(kkmax)#
		print(c)#
		#
		#
	} #
}#
#
running_mean(1:10)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		kkmin = kmin#
		kkmax = kmax#
		if (i <= kmin) kkmin = i -1#
		if (n - i <=  kmax) kkmax = (n - i)#
		a = i - kkmin#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		#
		print(n)#
		print(kkmin)#
		print(kkmax)#
		print(c)#
		#
		#
	} #
}#
#
running_mean(1:10)
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		kkmin = kmin#
		kkmax = kmax#
		if (i <= kmin) kkmin = i - 1#
		if (n - i <=  kmax) kkmax = (n - i)#
		a = i - kkmin#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		#
		print(n)#
		print(a)#
		print(b)#
		print(c)#
		#
		#
	} #
}#
#
running_mean(1:10)
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		kkmin = kmin#
		kkmax = kmax#
		if (i <= kmin) kkmin = i#
		if (n - i <=  kmax) kkmax = (n - i)#
		a = i - kkmin#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		#
		print(n)#
		print(a)#
		print(b)#
		print(c)#
		#
		#
	} #
}#
#
running_mean(1:10)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		kkmin = kmin#
		kkmax = kmax#
		if (i <= kmin) kkmin = i - 1#
		if (n - i <=  kmax) kkmax = (n - i)#
		a = i - kkmin - 1#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		#
		print(n)#
		print(a)#
		print(b)#
		print(c)#
		#
		#
	} #
}#
#
running_mean(1:10)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		kkmin = kmin#
		kkmax = kmax#
		if (i <= kmin) kkmin = i - 1#
		if (n - i <=  kmax) kkmax = (n - i)#
		a = i - kkmin - 1#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		print(n)#
		print(a)#
		print(b)#
		print(c)#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
}#
#
running_mean(1:10)
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		kkmin = kmin#
		kkmax = kmax#
		if (i <= kmin) kkmin = i - 1#
		if (n - i <=  kmax) kkmax = (n - i)#
		a = i - kkmin - 1#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		print(n)#
		print(a)#
		print(b)#
		print(c)#
		print(length(ind))#
		p2[i] = t(p) %*% ind#
	} #
	return(p2)#
}#
#
running_mean(1:10)
1:10
#
system.time(running_mean(runif(100)))#
system.time(running_mean(runif(1000)))#
system.time(running_mean(runif(10000)))#
system.time(running_mean(runif(100000)))#
system.time(running_mean(runif(1000000)))
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = rep(NA, n)#
	#
	for(i in 1:n){#
		kkmin = kmin#
		kkmax = kmax#
		if (i <= kmin) kkmin = i - 1#
		if (n - i <=  kmax) kkmax = (n - i)#
		a = i - kkmin - 1#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		p2[i] = t(p) %*% ind#
	} #
	return(p2)#
}#
#
system.time(running_mean(runif(100)))#
system.time(running_mean(runif(1000)))#
system.time(running_mean(runif(10000)))#
system.time(running_mean(runif(100000)))#
system.time(running_mean(runif(1000000)))
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = numeric(0)#
	im = numeric(0)#
	for(i in 1:n){#
		kkmin = kmin#
		kkmax = kmax#
		if (i <= kmin) kkmin = i - 1#
		if (n - i <=  kmax) kkmax = (n - i)#
		a = i - kkmin - 1#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		im = rbind(im, ind)#
		if(i %% 100 == 0 | i == n){#
			p2 = c(p2, t(p) %*% im)#
		}#
	} #
	return(p2)#
}#
#
system.time(running_mean(runif(100)))#
system.time(running_mean(runif(1000)))#
system.time(running_mean(runif(10000)))
#
running_mean = function(p, kmin = 2, kmax = 2){#
	n = length(p)#
	p2 = numeric(0)#
	im = numeric(0)#
	for(i in 1:n){#
		kkmin = kmin#
		kkmax = kmax#
		if (i <= kmin) kkmin = i - 1#
		if (n - i <=  kmax) kkmax = (n - i)#
		a = i - kkmin - 1#
		b = kkmin + kkmax + 1#
		c = n - a - b#
		ind = rep(c(0, 1, 0), c(a, b, c))#
		im = cbind(im, ind)#
		if(i %% 100 == 0 | i == n){#
			p2 = c(p2, t(p) %*% im)#
		}#
	} #
	return(p2)#
}#
#
system.time(running_mean(runif(100)))#
system.time(running_mean(runif(1000)))#
system.time(running_mean(runif(10000)))
library(ts)
install.package(ts)
install.packages(ts)
filter
?filter
x <- 1:100#
filter(x, rep(1, 3))
x <- 1:100#
filter(x, rep(1, 5))
load("Desktop/praks7andmed.RData")
ls
linnad
sum(linnad$head())
ddply(linnad, "State", function(x){#
	data.frame(mean_pop = mean(x$pop_estimate), mean_white = mean(x$white), mean_births = mean(x$births), mean_female = mean(x$females_percent))#
})
library(ddply)
#
ddply(linnad, "State", function(x){#
	data.frame(mean_pop = mean(x$pop_estimate), mean_white = mean(x$white), mean_births = mean(x$births), mean_female = mean(x$females_percent))#
})
load("~/Desktop/praks4andmed.RData")
''
Liivika Tee
ls()
rm(x)
mtcars
iris
save(mtcars, iris, file = "andmed.Rdata")
load("andmed.RData")
print(load("andmed.RData"))
print(load("~/Desktop/praks4andmed.RData"))
head(mass)
is.na(x)
sum(is.na(x))
x[is.na(x)]
x[!is.na(x)]
x[is.na(x)]  = 0
x = c(1:5, NA, 6:10, NA)
mean(x)
mean(x, na.rm = T)
sum(x, na.rm = T)
sum(is.na(mass$WAGP))
sum(is.na(mass$WAGP)) / length(mass$WAGP)
sum(is.na(mass$WAGP)) / nrow(mass)
mean(mass$WAGP, na.rm = T)
#
WAGP2 = mass$WAGP#
WAGP2[is.na(WAGP2)] = 0#
mean(WAGP2)
mass_puuduva_palgaga = mass[is.na(mass$WAGP), ]
mass_puuduva_palgaga = mass[!is.na(mass$WAGP), ]
x = factor(rep(c("A", "B", "C"), c(1, 3, 6)))#
y = factor(rep(c("A", "B", "C"), c(2, 5, 3)))#
table(x)#
table(y)
table(x, y)
x
y
z= factor(rep(c("A","B","C")), c(5,1,4))
z= factor(rep(c("A","B","C"), c(5,1,4)))
z
table(x, y, z)
quantile(mass$WAGP, na.rm = T, probs = c(0.25, 0.5, 0.75))
table(mass$MARHT)
table(mass$MARHT, useNA = "always")
table(mass$MARHT, mass$SEX)
ftable(mass$MARHT, mass$SEX, mass$CIT, row.vars = c(3, 1))
head(mass_merge)
head(house_merge_merge)
head(house_merge)
m = merge(mass_merge, house_merge)
dim(m)
dim(mass_merge)
m2 = merge(mass_merge, house_small_merge)
dim(m2)
m3 = merge(mass_merge, house_small_merge, all = T)
dim(m3)
head(m3)
head(m2)
length(unique(m$SERIALNO))
sum(duplicated(m$SERIALNO) / length(m$SERIALNO))
uus = m[!duplicated(m$SERIALNO), c("SERIALNO", "ACR", "COST", "TOWN")]
qnorm(0.95)
qnorm(0.975)
exp = justRMA(cdfname = "/home/ilmjarv/work/demimodule/comparisons/annotationData/chipTypes/HuEx-1_0-st-v2/HuEx-1_0-st-v2.cdf")
print(load("~/Desktop/praks7andmed.RData"))
dashead(linnad)
qplot(x = per_capita_inc, y = unemployment_rate, data = linnad)
qplot(x = per_capita_inc, y = unemployment_rate, colour = State, data = linnad)
qplot(x = per_capita_inc, y = unemployment_rate, colour = bachelor, data = linnad)
qplot(x = per_capita_inc, y = unemployment_rate, colour = bachelor, shape = State, data = linnad)
qplot(x = high_scl, y = bachelor, data = linnad)
qplot(x = high_scl, y = bachelor, colour = State, data = linnad)
qplot(x = high_scl, y = bachelor, shape = State, data = linnad)
qplot(x = high_scl, y = bachelor, colour = State, size = pop_estimate, data = linnad)
qplot(x = perc_poverty, geom = "bar", data = linnad)
qplot(x = perc_poverty,  fill  = Birth_factor,  geom = "bar", data = linnad)
qplot(x = Birth_factor, y = perc_poverty, geom = "boxplot", data = linnad2)
qplot(x = Birth_factor, y = perc_poverty, geom = "boxplot", data = linnad)
qplot(x = bachelor, geom = "bar", data = linnad)
qplot(x = bachelor, geom = "bar", binwidth = 10, data = linnad)
qplot(x = bachelor, geom = "bar", binwidth = 1, data = linnad)
qplot(x = bachelor, geom = "bar", fill = State, data = linnad)
qplot(x = State, y = high_scl, geom = "boxplot", data = linnad)
qplot(x = per_capita_inc, y = unemployment_rate , colour = bachelor, facets = . ~  State ~ ., data = linnad)
qplot(x = per_capita_inc, y = unemployment_rate , colour = bachelor, facets = . ~  State, data = linnad)
qplot(x = per_capita_inc, y = unemployment_rate , colour = bachelor, facets = State ~ ., data = linnad)
head(linnad)
qplot(x = per_capita_inc, y = unemployment_rate , colour = bachelor, facets = State ~ Poverty_factor, data = linnad)
linnad = linnad[!is.na(linnad$Birth_factor),]
qplot(x = high_scl, y = bachelor, facets = Birth_factor ~ ., data = linnad)
qplot(x = high_scl, y = bachelor, facets = . ~ Birth_factor, data = linnad)
qplot(x = high_scl, y = bachelor, facets = State ~ Birth_factor, data = linnad)
qplot(x = Birth_factor, fill = Poverty_factor, geom = "bar", position = "dodge", data = linnad2)
qplot(x = Birth_factor, fill = Poverty_factor, geom = "bar", position = "dodge", data = linnad)
qplot(x = Birth_factor, fill = Poverty_factor, geom = "bar", position = "stack", data = linnad2)
qplot(x = Birth_factor, fill = Poverty_factor, geom = "bar", position = "stack", data = linnad)
qplot(x = Birth_factor, fill = Poverty_factor, geom = "bar", position = "fill", data = linnad)
qplot(x = Birth_factor, y = perc_poverty, geom = "point", data = linnad2)
qplot(x = Birth_factor, y = perc_poverty, geom = "point", data = linnad)
qplot(x = Birth_factor, y = perc_poverty, geom = "point", position = "jitter", data = linnad)
qplot(x = State, geom = "bar", fill = Birth_factor, data = linnad)
qplot(x = State, geom = "bar", fill = Birth_factor,  position = "dodge", data = linnad)
qplot(x = State, geom = "bar", fill = Birth_factor, position = "fill", data = linnad)
linnad2 = linnad
qplot(x = per_capita_inc, y = unemployment_rate, data = linnad2) + geom_smooth()
qplot(x = per_capita_inc, y = unemployment_rate, data = linnad2) + geom_smooth(aes(colour = State))
qplot(x = per_capita_inc, y = unemployment_rate, data = linnad2) + geom_smooth(aes(colour = "yellow"))
qplot(x = per_capita_inc, y = unemployment_rate, data = linnad2) + geom_smooth(colour = "yellow")
qplot(x = per_capita_inc, y = unemployment_rate, data = linnad2[1:20,]) + geom_text(aes(label = County), size = 3, vjust = 0, hjust = 0)
qplot(x = per_capita_inc, y = unemployment_rate, data = linnad2) + geom_text(aes(label = County), size = 3, vjust = 0, hjust = 0, data = linnad2[c(34, 48, 65, 68, 70, 99),])
qplot(high_scl, bachelor, data = linnad2) + geom_text(aes(label = County), data = linnad2[linnad2$high_scl < 50, ], vjust = 1, size = 3)
p2 = qplot(high_scl, bachelor, data = linnad2)#
p2#
#
#
#
qplot(high_scl, bachelor, data = linnad2) + geom_text(aes(label = County), data = linnad2[linnad2$high_scl < 50, ], vjust = 1, size = 3)#
#
p3 = p2 + geom_text(aes(label = County), data = linnad2[linnad2$high_scl < 50, ], vjust = 1, size = 3  )#
p3#
#
#
#
qplot(high_scl, bachelor, data = linnad2) + geom_text(aes(label = County), data = linnad2[linnad2$high_scl < 50, ], vjust = 1, size = 3) + geom_vline(xintercept = 50)#
#
p4 = p3 + geom_vline(xintercept = 50)#
p4
ggsave("~/Desktop/naide.png")
ggsave("~/Desktop/naide.pdf")
library(pheatmap)
?pheatmap
rdply(10, x = rexp(10) + 10; data.frame(ST = min(x) + 1/10, VR = mean(x) - 1))
rdply(10, data.frame(ST = min(x = rexp(10) + 10) + 1/10, VR = mean(x = rexp(10) + 10) - 1))
rdply(10, data.frame(ST = min(x = rexp(10)) + 1/10, VR = mean(x = rexp(10) + 10) - 1))
rdply(10, data.frame(ST = min(x = rexp(10)) + 1/10, VR = mean(x = rexp(10)) - 1))
a = rdply(10000, data.frame(ST = min(x = rexp(10)) + 1/10, VR = mean(x = rexp(10)) - 1))
a = rdply(10000, data.frame(ST = min(x = rexp(10)) + 1/10, VR = mean(x = rexp(10)) - 1), .progress = T)
a = rdply(10000, data.frame(ST = min(x = rexp(10)) + 1/10, VR = mean(x = rexp(10)) - 1), .progress = "text")
library(reshape)
a = rdply(10000, data.frame(ST = min(x = rexp(10)) + 1/10, VR = mean(x = rexp(10)) - 1), .progress = "text") ; b = melt(a, id.vars = ".n"); ddply(b, "variable", function(x) mean(x value))
a = rdply(10000, data.frame(ST = min(x = rexp(10)) + 1/10, VR = mean(x = rexp(10)) - 1), .progress = "text") ; b = melt(a, id.vars = ".n"); ddply(b, "variable", function(x) mean(x$value))
a = rdply(10000, data.frame(ST = min(x = rexp(10)) - 1/10, VR = mean(x = rexp(10)) - 1), .progress = "text") ; b = melt(a, id.vars = ".n"); ddply(b, "variable", function(x) mean(x$value))
a = rdply(10000, data.frame(ST = min(x = rexp(10)) - 1/10, VR = mean(x = rexp(10)) - 1), .progress = "text") ; b = melt(a, id.vars = ".n"); ddply(b, "variable", function(x) var(x$value))
a = rdply(10000, data.frame(ST = min(x = rexp(100)) - 1/100, VR = mean(x = rexp(100)) - 1), .progress = "text") ; b = melt(a, id.vars = ".n"); ddply(b, "variable", function(x) var(x$value))
n = names(t)[t > 1]
a2ensg = subset(a2ensg, V1 %in% n)
#
#
write.table(affys, file = "~/Sodi/affys.txt", row.names = F, col.names = F, quote = F)#
system("cat ~/Sodi/affys.txt | gconvert -t ensg -o hsapiens > ~/Sodi/convertedaffys.txt ")#
a2ensg = read.table("~/Sodi/convertedaffys.txt")#
#
save(a2ensg, file = "Data/a2ensg.RData")#
#
#
print(load("Data/a2ensg.RData"))#
#
table(table(a2ensg[, 1]))#
#
#
t = table(a2ensg[, 1])#
n = names(t)[t > 1]#
#
a2ensg = subset(a2ensg, !(V1 %in% n))
a = a2ensg[, 2]#
names(a) = a2ensg[, 2]
a = as.character(a2ensg[, 2])#
names(a) = a2ensg[, 1]
detected = data.frame(Affy = int, Gene = a[int], N = ndetect[int])
library(plyr)
?splat
data.frame(x = rnorm(1000, mean = rep(0:1, c(500, 500)), y = factor(rep(0:1, c(500, 500)), labels = c("A", "B")))
)
data.frame(x = rnorm(1000, mean = rep(0:1, c(500, 500))), y = factor(rep(0:1, c(500, 500)), labels = c("A", "B")))
dat = data.frame(x = rnorm(1000, mean = rep(0:1, c(500, 500))), y = factor(rep(0:1, c(500, 500)), labels = c("A", "B")))
library(ggplot2)
qplot(x, y = ..density.., geom = "area", stat = "bin", data = dat)
qplot(x, y = ..density.., geom = "area", stat = "bin", fill = class, data = dat)
qplot(x, y = ..density.., geom = "area", stat = "bin", fill = y, data = dat)
qplot(x, y = ..density.., geom = "area", stat = "bin", fill = y, position = "identity", data = dat)
qplot(x, y = ..density.., geom = "area", stat = "bin", fill = y, position = "identity", alpha = I(0.5), data = dat)
qplot(x, y = ..density.., geom = "area", stat = "bin", fill = y, position = "identity", alpha = I(0.5), data = dat, binwidth = 2)
qplot(x, y = ..density.., geom = "area", stat = "bin", fill = y, position = "identity", alpha = I(0.5), data = dat, binwidth = 4)
library(roxygen)#
#
setwd("~/Raivo/Projects/RUtil/")#
#
roxygenize(package.dir = "Source", roxygen.dir = "RUtil", unlink.target = T, use.Rd2 = T)
